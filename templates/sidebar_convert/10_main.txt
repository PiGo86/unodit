# -*- coding: utf-8 -*-
#!/usr/bin/env python

# =============================================================================
#
# Write your code here
#
# =============================================================================

import uno
from com.sun.star.awt.MessageBoxButtons import BUTTONS_OK, BUTTONS_OK_CANCEL, BUTTONS_YES_NO, BUTTONS_YES_NO_CANCEL, BUTTONS_RETRY_CANCEL, BUTTONS_ABORT_IGNORE_RETRY
from com.sun.star.awt.MessageBoxButtons import DEFAULT_BUTTON_OK, DEFAULT_BUTTON_CANCEL, DEFAULT_BUTTON_RETRY, DEFAULT_BUTTON_YES, DEFAULT_BUTTON_NO, DEFAULT_BUTTON_IGNORE
from com.sun.star.awt.MessageBoxType import MESSAGEBOX, INFOBOX, WARNINGBOX, ERRORBOX, QUERYBOX

from ${UI_DIR}.${APP_NAME}_UI import ${APP_NAME}_UI

# ----------------- helpers for API_inspector tools -----------------

# uncomment for MRI
#def mri(ctx, target):
#${I}mri = ctx.ServiceManager.createInstanceWithContext("mytools.Mri", ctx)
#${I}mri.inspect(target)

# uncomment for Xray
#from com.sun.star.uno import RuntimeException as _rtex
#def xray(myObject):
#${I}try:
#${I}${I}sm = uno.getComponentContext().ServiceManager
#${I}${I}mspf = sm.createInstanceWithContext("com.sun.star.script.provider.MasterScriptProviderFactory", uno.getComponentContext())
#${I}${I}scriptPro = mspf.createScriptProvider("")
#${I}${I}xScript = scriptPro.getScript("vnd.sun.star.script:XrayTool._Main.Xray?language=Basic&location=application")
#${I}${I}xScript.invoke((myObject,), (), ())
#${I}${I}return
#${I}except:
#${I}${I}raise _rtex("\nBasic library Xray is not installed", uno.getComponentContext())


class ${APP_NAME}(${APP_NAME}_UI):
${I}'''
${I}Class documentation...
${I}'''
${I}def __init__(self, panelWin, context=uno.getComponentContext()):
${I}${I}self.dlg = panelWin
${I}${I}self.ctx = context
${I}${I}${APP_NAME}_UI.__init__(self, self.dlg, self.ctx)

${I}${I}# document
${I}${I}self.ctx = uno.getComponentContext()
${I}${I}self.smgr = self.ctx.ServiceManager
${I}${I}self.desktop = self.smgr.createInstanceWithContext("com.sun.star.frame.Desktop", self.ctx)
${I}${I}self.document = self.desktop.getCurrentComponent()

${I}def getHeight(self):
${I}${I}return self.DialogContainer.Size.Height

${I}# --------- my code ---------------------
${I}# mri(self.LocalContext, self.DialogContainer)
${I}# xray(self.DialogContainer)

${I}def myFunction(self):
${I}${I}# TODO: not implemented
${I}${I}pass

${I}# --------- helpers ---------------------

${I}def messageBox(self, MsgText, MsgTitle, MsgType=MESSAGEBOX, MsgButtons=BUTTONS_OK):
${I}${I}sm = self.LocalContext.ServiceManager
${I}${I}si = sm.createInstanceWithContext("com.sun.star.awt.Toolkit", self.LocalContext)
${I}${I}mBox = si.createMessageBox(self.Toolkit, MsgType, MsgButtons, MsgTitle, MsgText)
${I}${I}mBox.execute()

${I}# -----------------------------------------------------------
${I}#               Execute dialog
${I}# -----------------------------------------------------------

${I}def showDialog(self):
${I}${I}self.DialogContainer.setVisible(True)
${I}${I}self.DialogContainer.createPeer(self.Toolkit, None)
${I}${I}self.DialogContainer.execute()

${I}# -----------------------------------------------------------
${I}#               Action events
${I}# -----------------------------------------------------------

${GEN_ACTIONS_CALLBACKS}


def ${EXEC_FUNCTION_PREFIX}${APP_NAME}(*args):
${I}"""
${I}Intended to be used in a development environment only
${I}Copy this file in src dir and run with (Tools - Macros - MyMacros)
${I}After development copy this file back
${I}"""
${I}try:
${I}${I}ctx = remote_ctx   # use in development
${I}except:
${I}${I}ctx = uno.getComponentContext()    # use in production
${I}sm = ctx.ServiceManager
${I}dialog = sm.createInstanceWithContext("com.sun.star.awt.UnoControlDialog", ctx)

${I}app = ${APP_NAME}(dialog, ctx)
${I}app.showDialog()

g_exportedScripts = ${EXEC_FUNCTION_PREFIX}${APP_NAME},
