# -*- coding: utf-8 -*-
#!/usr/bin/env python

# =============================================================================
#
# Write your code here
#
# =============================================================================

import uno
import unohelper

from com.sun.star.awt.MessageBoxButtons import BUTTONS_OK, BUTTONS_OK_CANCEL, BUTTONS_YES_NO, BUTTONS_YES_NO_CANCEL, BUTTONS_RETRY_CANCEL, BUTTONS_ABORT_IGNORE_RETRY
from com.sun.star.awt.MessageBoxButtons import DEFAULT_BUTTON_OK, DEFAULT_BUTTON_CANCEL, DEFAULT_BUTTON_RETRY, DEFAULT_BUTTON_YES, DEFAULT_BUTTON_NO, DEFAULT_BUTTON_IGNORE
from com.sun.star.awt.MessageBoxType import MESSAGEBOX, INFOBOX, WARNINGBOX, ERRORBOX, QUERYBOX

from com.sun.star.ui import XUIElementFactory
from com.sun.star.lang import XComponent
from com.sun.star.ui import XUIElement, XToolPanel,XSidebarPanel, LayoutSize
from com.sun.star.frame import XDispatch,XDispatchProvider
from com.sun.star.ui.UIElementType import TOOLPANEL as UET_TOOLPANEL

${IMPORT_PANELS}


# ----------------- helpers for API_inspector tools -----------------

# uncomment for MRI
#def mri(ctx, target):
#${I}mri = ctx.ServiceManager.createInstanceWithContext("mytools.Mri", ctx)
#${I}mri.inspect(target)

# uncomment for Xray
#from com.sun.star.uno import RuntimeException as _rtex
#def xray(myObject):
#${I}try:
#${I}${I}sm = uno.getComponentContext().ServiceManager
#${I}${I}mspf = sm.createInstanceWithContext("com.sun.star.script.provider.MasterScriptProviderFactory", uno.getComponentContext())
#${I}${I}scriptPro = mspf.createScriptProvider("")
#${I}${I}xScript = scriptPro.getScript("vnd.sun.star.script:XrayTool._Main.Xray?language=Basic&location=application")
#${I}${I}xScript.invoke((myObject,), (), ())
#${I}${I}return
#${I}except:
#${I}${I}raise _rtex("\nBasic library Xray is not installed", uno.getComponentContext())

def messageBox(MsgText, MsgTitle, MsgType=MESSAGEBOX, MsgButtons=BUTTONS_OK):
${I}ctx = uno.getComponentContext()
${I}sm = ctx.ServiceManager
${I}si = sm.createInstanceWithContext("com.sun.star.awt.Toolkit", ctx)
${I}toolkit = sm.createInstanceWithContext("com.sun.star.awt.ExtToolkit", ctx)
${I}mBox = si.createMessageBox(toolkit, MsgType, MsgButtons, MsgTitle, MsgText)
${I}mBox.execute()


class ElementFactory( unohelper.Base, XUIElementFactory):
${I}"""
${I}UNO service that implements the com/sun/star/ui/XUIElementFactory interface.
${I}If you write a new factory then add it to Factories.xcu
${I}Method createUIElement(URL,arguments) is called for URLs defined in Sidebar.xcu.
${I}"""

${I}def __init__(self, ctx):
${I}${I}self.ctx = ctx

${I}def createUIElement(self, url, args):

${I}${I}try:
${I}${I}${I}xParentWindow = None
${I}${I}${I}xFrame = None
${I}${I}${I}xUIElement = None

${I}${I}${I}for arg in args:
${I}${I}${I}${I}if arg.Name == "Frame":
${I}${I}${I}${I}${I}xFrame = arg.Value
${I}${I}${I}${I}elif arg.Name == "ParentWindow":
${I}${I}${I}${I}${I}xParentWindow = arg.Value

${I}${I}${I}xUIElement = XUIPanel(self.ctx, xFrame, xParentWindow, url)

${I}${I}${I}# getting the real panel window
${I}${I}${I}# for setting the content
${I}${I}${I}xUIElement.getRealInterface()
${I}${I}${I}panelWin = xUIElement.Window

${I}${I}${I}# panelWin has to be set visible
${I}${I}${I}panelWin.Visible = True

${I}${I}${I}# get and set height to receive a working scrollbar
${I}${I}${I}height = showPanels(panelWin, url)
${I}${I}${I}xUIElement.height = height

${I}${I}${I}return xUIElement

${I}${I}except Exception as e:
${I}${I}${I}print(e)
${I}${I}${I}tb()

g_ImplementationHelper = unohelper.ImplementationHelper()
g_ImplementationHelper.addImplementation(
${I}${I}ElementFactory,
${I}${I}"${EXTENSION_IDENTIFIER_DOMAIN}.${EXTENSION_IDENTIFIER_APP}",
${I}${I}("com.sun.star.task.Job",),)


class XUIPanel( unohelper.Base,  XSidebarPanel, XUIElement, XToolPanel, XComponent):

${I}def __init__(self, ctx, frame, xParentWindow, url):

${I}${I}self.ctx = ctx
${I}${I}self.xParentWindow = xParentWindow
${I}${I}self.window = None
${I}${I}self.height = 100

${I}# XUIElement
${I}def getRealInterface(self):

${I}${I}if not self.window:
${I}${I}${I}dialogUrl = "vnd.sun.star.extension://${EXTENSION_IDENTIFIER_DOMAIN}.${EXTENSION_IDENTIFIER_APP}/empty_dialog.xdl"
${I}${I}${I}smgr = self.ctx.ServiceManager

${I}${I}${I}provider = smgr.createInstanceWithContext("com.sun.star.awt.ContainerWindowProvider", self.ctx)
${I}${I}${I}self.window = provider.createContainerWindow(dialogUrl, "", self.xParentWindow, None)

${I}${I}return self

${I}@property
${I}def Frame(self):
${I}${I}self.frame = frame

${I}@property
${I}def ResourceURL(self):
${I}${I}return self.name

${I}@property
${I}def Type(self):
${I}${I}return UET_TOOLPANEL

${I}# XComponent
${I}def dispose(self):
${I}${I}pass

${I}def addEventListener(self, ev): pass

${I}def removeEventListener(self, ev): pass

${I}# XToolPanel
${I}def createAccessible(self, parent):
${I}${I}return self

${I}@property
${I}def Window(self):
${I}${I}return self.window

${I}# XSidebarPanel
${I}def getHeightForWidth(self, width):
${I}${I}# print("getHeightForWidth: %s" % width)
${I}${I}# return LayoutSize(0, -1, 0) # full height
${I}${I}return LayoutSize(self.height, self.height, self.height)

${I}# LO5.1-
${I}def getMinimalWidth(self):
${I}${I}return 300

class test(unohelper.Base, XDispatch, XDispatchProvider):

${I}IMPLE_NAME = "${EXTENSION_IDENTIFIER_DOMAIN}.${SIDEBAR_PROTOCOL}"
${I}SERVICE_NAMES = IMPLE_NAME,

${I}@classmethod
${I}def get_imple(klass):
${I}${I}#pydevBrk()
${I}${I}return klass, klass.IMPLE_NAME, klass.SERVICE_NAMES

${I}def __init__(self, *args):
${I}${I}pass

${I}def queryDispatches(self, *args):
${I}${I}return

${I}def queryDispatch(self, featureURL, frameName, searchFlag):
${I}${I}return self

${I}def dispatch(self, featureURL, args):
${I}${I}self.showDefaultMenuCommand(featureURL)

${I}def addStatusListener(self, listener, featureURL):
${I}${I}#print('addStatusListener', featureURL.Path)
${I}${I}return

${I}def removeStatusListener(self, listener, featureURL):
${I}${I}#print('removeStatusListener', featureURL.Path)
${I}${I}return

${I}def showDefaultMenuCommand(self, featureURL):
${I}${I}"""
${I}${I}Command that is dispatched when the user clicks on
${I}${I}the "More Options" button in the panel title bar
${I}${I}"""

${I}${I}ctx = uno.getComponentContext()
${I}${I}sm = ctx.ServiceManager
${I}${I}dialog = sm.createInstanceWithContext("com.sun.star.awt.UnoControlDialog", ctx)

${RUN_DEFAULT_MENU_COMMAND}

g_ImplementationHelper.addImplementation(*test.get_imple())


def showPanels(panelWin, url):
${I}"""
${I}Create a new panel object when the sidebar is initialized
${I}or whenever a panel becomes visible
${I}"""

${I}ctx = uno.getComponentContext()
${I}# url is set in Sidebar.xcu
${RUN_PANELS}
